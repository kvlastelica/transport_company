/*
 * This is a transportation company TRANS-AM ERP with two Gateway and two microservice applications
 */
 
application {
  config {
    baseName transamstore
    applicationType gateway
    packageName com.transam.store
    serviceDiscoveryType no
    authenticationType jwt
    prodDatabaseType mysql
    cacheProvider no
    buildTool maven
    clientFramework angularX
  }
  entities Customer, Ticket, TicketOrder, OrderItem
}

application {
  config {
    baseName transambackoffice
    applicationType gateway
    packageName com.transam.backoffice
    serviceDiscoveryType no
    authenticationType jwt
    prodDatabaseType mysql
    cacheProvider no
    buildTool maven
    clientFramework angularX
  }
  entities Department, Employee, Vehicle, Route, RouteSchedule
}

application {
  config {
    baseName transaminvoice
    applicationType gateway
    packageName com.transam.invoice
    serviceDiscoveryType no
    authenticationType jwt
    prodDatabaseType mysql
    cacheProvider no
    buildTool maven
    serverPort 8081
  }
  entities Invoice
}

application {
  config {
    baseName transamnotification
    applicationType gateway
    packageName com.transam.notification
    serviceDiscoveryType no
    authenticationType jwt
    databaseType mongodb
    prodDatabaseType mongodb
    devDatabaseType mongodb
    cacheProvider no
    enableHibernateCache false
    buildTool maven
    serverPort 8082
  }
  entities Notification
}

/* Entities for Store Gateway */

/** Ticket sold by the Online store */
entity Ticket {
    name String required
    description String
    price BigDecimal required min(0)
    productSize TicketType required
    image ImageBlob
}

enum TicketType {
    PASSENGER, PASSENGER_KID, PARCEL_M, PARCEL_L, PARCEL_XL, PARCEL_XXL
}


entity Customer {
    firstName String required
    lastName String required
    type CustomerType required
    email String required pattern(/^[^@\s]+@[^@\s]+\.[^@\s]+$/)
    phone String required
    addressLine1 String required
    addressLine2 String
    city String required
    country String required
}

enum CustomerType {
    INDIVIDUAL, BUSINESS
}

entity TicketOrder {
    placedDate Instant required
    status OrderStatus required
    code String required
    invoiceId Long
}

enum OrderStatus {
    COMPLETED, PENDING, CANCELLED
}

entity OrderItem {
    quantity Integer required min(0)
    totalPrice BigDecimal required min(0)
}

relationship OneToOne {
    Customer to User with builtInEntity
}

relationship ManyToOne {
	OrderItem{ticket(name) required} to Ticket
}

relationship OneToMany {
   Customer{order} to TicketOrder{customer(email) required},
   TicketOrder{orderItem} to OrderItem{order(code) required} 
}

service Ticket, Customer, TicketOrder, OrderItem with serviceClass
paginate Ticket, Customer, TicketOrder, OrderItem with pagination

/* Entities for Invoice microservice */
entity Invoice {
    id UUID required
    code String required
    ticketOrderCode String required
    date Instant required
    details String
    status InvoiceStatus required
    paymentMethod PaymentMethod required
    paymentDate Instant required
    paymentAmount BigDecimal required
}

enum InvoiceStatus {
    PAID, ISSUED, CANCELLED
}

enum PaymentMethod {
    CREDIT_CARD, CASH_ON_DELIVERY, PAYPAL
}

relationship OneToOne {
    Invoice to User with builtInEntity
}

/* Entities for notification microservice */

entity Notification {
    id String required
    date Instant required
    details String
    sentDate Instant required
    format NotificationType required
    userId Long required
    productId Long required
}

enum NotificationType {
    EMAIL, SMS, PARCEL
}

relationship OneToOne {
    Notification to User with builtInEntity
}


/* Entities for backoffice app */

entity Department {
	departmentName String required
    location String
    division String
    format DepartmentType required
}

enum DepartmentType {
    TICKETING, CONTROLLING, DRIVING, MAINTENANCE, ACCOUNTING, MARKETING, SALES, PROCUREMENT 
}

entity Employee{
	employeCode String required
    firstName String required
    lastName  String required
    jobTitle String

}

relationship OneToMany {
    Department{employee} to Employee{department(departmentName) required}
}

relationship OneToOne {
    Employee to User with builtInEntity
}


entity Vehicle {
	code String required
    description String required
    format VehicleType  required 

}

enum VehicleType {
    CAR, VAN, BUS, TRUCK, SHIP, PLANE 
}


entity Route {
	code String required
    description String required
    start String  required 
    destination String required
    passengerCapacity Integer required
    parcelTotalWeight BigDecimal required

}

entity RouteSchedule {
	code String required
    description String required
    departure Instant required
    arrival Instant required 
}

relationship OneToMany {
    Route{routeschedule} to RouteSchedule{route(code) required}
}

relationship ManyToMany {
    Route{employee} to Employee{route(code) required}
}

relationship ManyToMany {
    Route{vehicle} to Vehicle{route(code) required}
}

// relationship ManyToOne {
//     TicketOrder{routeschedule} to RouteSchedule{route(code) required}
// }



deployment {
  deploymentType docker-compose
  appsFolders [transaminvoice, transamnotification, transamstore, transambackoffice]
  dockerRepositoryName "transam"
}

deployment {
  deploymentType kubernetes
  appsFolders [transaminvoice, transamnotification, transamstore,transambackoffice]
  dockerRepositoryName "transam"
}