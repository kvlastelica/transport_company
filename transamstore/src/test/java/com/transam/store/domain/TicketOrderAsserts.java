package com.transam.store.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TicketOrderAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTicketOrderAllPropertiesEquals(TicketOrder expected, TicketOrder actual) {
        assertTicketOrderAutoGeneratedPropertiesEquals(expected, actual);
        assertTicketOrderAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTicketOrderAllUpdatablePropertiesEquals(TicketOrder expected, TicketOrder actual) {
        assertTicketOrderUpdatableFieldsEquals(expected, actual);
        assertTicketOrderUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTicketOrderAutoGeneratedPropertiesEquals(TicketOrder expected, TicketOrder actual) {
        assertThat(actual)
            .as("Verify TicketOrder auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTicketOrderUpdatableFieldsEquals(TicketOrder expected, TicketOrder actual) {
        assertThat(actual)
            .as("Verify TicketOrder relevant properties")
            .satisfies(a -> assertThat(a.getPlacedDate()).as("check placedDate").isEqualTo(expected.getPlacedDate()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getCode()).as("check code").isEqualTo(expected.getCode()))
            .satisfies(a -> assertThat(a.getInvoiceId()).as("check invoiceId").isEqualTo(expected.getInvoiceId()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTicketOrderUpdatableRelationshipsEquals(TicketOrder expected, TicketOrder actual) {
        assertThat(actual)
            .as("Verify TicketOrder relationships")
            .satisfies(a -> assertThat(a.getCustomer()).as("check customer").isEqualTo(expected.getCustomer()));
    }
}
