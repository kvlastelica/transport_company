package com.transam.backoffice.domain;

import static com.transam.backoffice.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class RouteAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRouteAllPropertiesEquals(Route expected, Route actual) {
        assertRouteAutoGeneratedPropertiesEquals(expected, actual);
        assertRouteAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRouteAllUpdatablePropertiesEquals(Route expected, Route actual) {
        assertRouteUpdatableFieldsEquals(expected, actual);
        assertRouteUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRouteAutoGeneratedPropertiesEquals(Route expected, Route actual) {
        assertThat(actual)
            .as("Verify Route auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRouteUpdatableFieldsEquals(Route expected, Route actual) {
        assertThat(actual)
            .as("Verify Route relevant properties")
            .satisfies(a -> assertThat(a.getCode()).as("check code").isEqualTo(expected.getCode()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getStart()).as("check start").isEqualTo(expected.getStart()))
            .satisfies(a -> assertThat(a.getDestination()).as("check destination").isEqualTo(expected.getDestination()))
            .satisfies(a -> assertThat(a.getPassengerCapacity()).as("check passengerCapacity").isEqualTo(expected.getPassengerCapacity()))
            .satisfies(a ->
                assertThat(a.getParcelTotalWeight())
                    .as("check parcelTotalWeight")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getParcelTotalWeight())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRouteUpdatableRelationshipsEquals(Route expected, Route actual) {
        assertThat(actual)
            .as("Verify Route relationships")
            .satisfies(a -> assertThat(a.getEmployees()).as("check employees").isEqualTo(expected.getEmployees()))
            .satisfies(a -> assertThat(a.getVehicles()).as("check vehicles").isEqualTo(expected.getVehicles()));
    }
}
